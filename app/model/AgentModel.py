from pydantic import BaseModel, Field
from typing import Union, Annotated, List
from typing_extensions import TypedDict

class general_question(BaseModel):
    question: str = Field(..., description = "Question or request from the user")
    answer: str = Field(..., description = "Answer generated by the llm via tools")

class first_agent(BaseModel):
    answer: str = Field(..., description = "Answer generated by the llm via tools")

class input_api(BaseModel):
    query: str = Field(..., description = "Question or request from the user")

class State(TypedDict):
    question: Annotated[List[Union[str]], "User question"]
    response: Annotated[List[Union[str]], "Response result"]
    ai_summarization: Annotated[List[Union[str]], "AI summary and final output from processed input"]

